package org.demo.rsotf;

unit CustomerUnit;

import org.demo.rsotf.model.CustomerStateType
import org.demo.rsotf.model.CustomerMovement;
import org.demo.rsotf.model.CustomerState;
import org.demo.rsotf.model.CustomerFocus;
import org.demo.rsotf.model.Department;

import org.demo.rsotf.services.CustomerStateService;

global CustomerStateService customerStateService

rule "Retrieve previous location"
salience 1000
when
    m: /customerMovements[customer_id: id]
then
    System.out.println(String.format("---- rule %s; customer id = %s", drools.getRule().getName(), customer_id));
    CustomerState l  = customerStateService.retrieveLocation(m);

    insert(l);
    customerState.set(l);
end


// Rules regarding user location in the store <----
rule "Locate department"
salience 500
activation-group "positioning"
no-loop
when
 c: /customerMovements[customer_id: id, x : x, y: y]
 d: /departmentDataStore[department_id: id, getArea().contains(x, y)]
then
    System.out.println(String.format("---- rule %s; customer id = %s", drools.getRule().getName(), customer_id));
    modify(c) {
        setSeenIn(d.getId())
   };
end

rule "Location unknown"
salience 500
activation-group "positioning"
no-loop
when
 c: /customerMovements[customer_id: id]
 s: /customerState[id == customer_id]
then
    System.out.println(String.format("---- rule %s; customer id = %s", drools.getRule().getName(), customer_id));

    // set the location (seen in) to unknown (null)
    modify(c) {
        setSeenIn(null)
    };
end
// ---->

rule "Determine focus"
salience 200
no-loop
when
 c: /customerMovements[customer_id: id]
 s: /customerState[id == customer_id]
then
    System.out.println(String.format("---- rule %s; customer id = %s", drools.getRule().getName(), customer_id));

    System.out.println();
    System.out.println("State: " + s);
    System.out.println();

    // if customer is seen in the same location again
    if (c.getSeenIn() != null && c.getSeenIn() == s.getLastSeenIn()) {
        System.out.println("User moved around THE SAME DEPARTMENT");
        s.incStateCnt();
    } else {
        // customer in unknown location or changed department
        System.out.println("customer in unknown location or changed department");
        s.resetStateCnt();
    }

    // update last position
    s.updateLastLocation(c);
    // increment number of moves
    s.incSequenceCnt();
    update(s);

    // and remember it
    customerStateService.storeLocation(s);
end

rule "Announce focused customer"
activation-group "judging"
salience 100
when
 s: /customerState[inStateCnt >= requiredNumberOfSteps]
then
    System.out.println(String.format("---- rule %s; location = %s", drools.getRule().getName(), s.toString()));

    CustomerFocus focus = new CustomerFocus(s.getTs(), s.getId(), s.getLastSeenIn());
    customerFocus.add(focus);
    insert(focus);

    // TODO reset sequenceCnt?
end

rule "Announce browsing customer"
activation-group "judging"
salience 90
when
 s: /customerState[sequenceCnt > 6]
then
    System.out.println(String.format("---- rule %s; location = %s", drools.getRule().getName(), s.toString()));

    browsingCustomer.set(s);
    insert(s);

    // TODO reset sequenceCnt?
end

//--

query FindFocused
    $c : /customerFocus
end

query FindBrowsing
    $c : /customerFocus
end

package org.demo.rsotf;

unit CustomerUnit;

import org.demo.rsotf.model.CustomerMovement;
import org.demo.rsotf.model.CustomerState;
import org.demo.rsotf.model.CustomerFocus;
import org.demo.rsotf.model.Department;

import org.demo.rsotf.services.StoreLocationService;

global StoreLocationService storeLocationService

rule "Retrieve previous location"
salience 1000
when
    m: /customerMovements[customer_id: id]
then
    System.out.println(String.format("---- rule %s; customer id = %s", drools.getRule().getName(), customer_id));
    CustomerState l  = storeLocationService.retrieveLocation(m);

    insert(l);
    customerState.set(l);
end


//-- Rules regarding user location in the store
rule "Locate department"
salience 100
activation-group "positionning"
when
 c: /customerMovements[x : x, y: y]
 d: /departmentDataStore[department_id: id, getArea().contains(x, y)]
then
    System.out.println("------------------------------------- rule Locate department");
    modify(c) {
        setSeenIn(d.getId())
   };
end

rule "Location unknown"
salience 90
activation-group "positionning"
when
 c: /customerMovements[customer_id: id]
then
    System.out.println(String.format("---- rule %s; customer id = %s", drools.getRule().getName(), customer_id));
    modify(c) {
        setSeenIn(null)
   };
end
//--


//-- Rules determining customer focus
rule "Determine focus"
salience 50
when
 c: /customerMovements[customer_id: id]
 l: /customerState[id == customer_id]
then
    System.out.println(String.format("---- rule %s; customer id = %s", drools.getRule().getName(), customer_id));

    // if customer is seen in the same location again
    if (c.getSeenIn() != null && c.getSeenIn() == l.getLastSeenIn()) {
        System.out.println("User moved around THE SAME DEPARTMENT");
        l.setInStateCnt(l.getInStateCnt() + 1);
    } else {
        System.out.println("Reset customer location");
        l.setInStateCnt(1);
    }

    // update last position
    l.update(c);
    update(l);

    // and remember it
    storeLocationService.storeLocation(l);
end

rule "Announce focused customer"
salience 40
when
 l: /customerState[inStateCnt >= requiredNumberOfSteps]
then
    System.out.println(String.format("---- rule %s; location = %s", drools.getRule().getName(), l.toString()));

    CustomerFocus focus = new CustomerFocus(l.getTs(), l.getId(), l.getLastSeenIn());
    customerFocus.add(focus);
    insert(focus);
end
//--

query FindFocused
    $c : /customerFocus
end
